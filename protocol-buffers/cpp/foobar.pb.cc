// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: foobar.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "foobar.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace benchpb {
class FooDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Foo> {
} _Foo_default_instance_;
class BarDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Bar> {
} _Bar_default_instance_;
class FooBarDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FooBar> {
} _FooBar_default_instance_;
class FooBarContainerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FooBarContainer> {
} _FooBarContainer_default_instance_;

namespace protobuf_foobar_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Foo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Foo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Foo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Foo, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Foo, prefix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Foo, length_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bar, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bar, parent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bar, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bar, ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bar, size_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FooBar, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FooBar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FooBar, sibling_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FooBar, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FooBar, rating_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FooBar, postfix_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FooBarContainer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FooBarContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FooBarContainer, list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FooBarContainer, initialized_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FooBarContainer, fruit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FooBarContainer, location_),
  ~0u,
  1,
  2,
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 9, sizeof(Foo)},
  { 13, 22, sizeof(Bar)},
  { 26, 35, sizeof(FooBar)},
  { 39, 48, sizeof(FooBarContainer)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Foo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Bar_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FooBar_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FooBarContainer_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "foobar.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _Foo_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Bar_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _FooBar_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _FooBarContainer_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Foo_default_instance_.DefaultConstruct();
  _Bar_default_instance_.DefaultConstruct();
  _FooBar_default_instance_.DefaultConstruct();
  _FooBarContainer_default_instance_.DefaultConstruct();
  _Bar_default_instance_.get_mutable()->parent_ = const_cast< ::benchpb::Foo*>(
      ::benchpb::Foo::internal_default_instance());
  _FooBar_default_instance_.get_mutable()->sibling_ = const_cast< ::benchpb::Bar*>(
      ::benchpb::Bar::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\014foobar.proto\022\007benchpb\"@\n\003Foo\022\n\n\002id\030\001 \002"
      "(\004\022\r\n\005count\030\002 \002(\005\022\016\n\006prefix\030\003 \002(\005\022\016\n\006len"
      "gth\030\004 \002(\r\"N\n\003Bar\022\034\n\006parent\030\001 \002(\0132\014.bench"
      "pb.Foo\022\014\n\004time\030\002 \002(\005\022\r\n\005ratio\030\003 \002(\002\022\014\n\004s"
      "ize\030\004 \002(\r\"V\n\006FooBar\022\035\n\007sibling\030\001 \001(\0132\014.b"
      "enchpb.Bar\022\014\n\004name\030\002 \001(\t\022\016\n\006rating\030\003 \001(\001"
      "\022\017\n\007postfix\030\004 \001(\r\"u\n\017FooBarContainer\022\035\n\004"
      "list\030\001 \003(\0132\017.benchpb.FooBar\022\023\n\013initializ"
      "ed\030\002 \001(\010\022\034\n\005fruit\030\003 \001(\0162\r.benchpb.Enum\022\020"
      "\n\010location\030\004 \001(\t**\n\004Enum\022\n\n\006Apples\020\000\022\t\n\005"
      "Pears\020\001\022\013\n\007Bananas\020\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 420);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "foobar.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_foobar_2eproto

const ::google::protobuf::EnumDescriptor* Enum_descriptor() {
  protobuf_foobar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_foobar_2eproto::file_level_enum_descriptors[0];
}
bool Enum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Foo::kIdFieldNumber;
const int Foo::kCountFieldNumber;
const int Foo::kPrefixFieldNumber;
const int Foo::kLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Foo::Foo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_foobar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:benchpb.Foo)
}
Foo::Foo(const Foo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&id_) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:benchpb.Foo)
}

void Foo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&id_) + sizeof(length_));
}

Foo::~Foo() {
  // @@protoc_insertion_point(destructor:benchpb.Foo)
  SharedDtor();
}

void Foo::SharedDtor() {
}

void Foo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Foo::descriptor() {
  protobuf_foobar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_foobar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Foo& Foo::default_instance() {
  protobuf_foobar_2eproto::InitDefaults();
  return *internal_default_instance();
}

Foo* Foo::New(::google::protobuf::Arena* arena) const {
  Foo* n = new Foo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Foo::Clear() {
// @@protoc_insertion_point(message_clear_start:benchpb.Foo)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&id_) + sizeof(length_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Foo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:benchpb.Foo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 prefix = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_prefix();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prefix_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 length = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:benchpb.Foo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:benchpb.Foo)
  return false;
#undef DO_
}

void Foo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:benchpb.Foo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // required int32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // required int32 prefix = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->prefix(), output);
  }

  // required uint32 length = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->length(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:benchpb.Foo)
}

::google::protobuf::uint8* Foo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:benchpb.Foo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // required int32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // required int32 prefix = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->prefix(), target);
  }

  // required uint32 length = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->length(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:benchpb.Foo)
  return target;
}

size_t Foo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:benchpb.Foo)
  size_t total_size = 0;

  if (has_id()) {
    // required uint64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  if (has_count()) {
    // required int32 count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  if (has_prefix()) {
    // required int32 prefix = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->prefix());
  }

  if (has_length()) {
    // required uint32 length = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->length());
  }

  return total_size;
}
size_t Foo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:benchpb.Foo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());

    // required int32 count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());

    // required int32 prefix = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->prefix());

    // required uint32 length = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->length());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Foo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:benchpb.Foo)
  GOOGLE_DCHECK_NE(&from, this);
  const Foo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Foo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:benchpb.Foo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:benchpb.Foo)
    MergeFrom(*source);
  }
}

void Foo::MergeFrom(const Foo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:benchpb.Foo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000004u) {
      prefix_ = from.prefix_;
    }
    if (cached_has_bits & 0x00000008u) {
      length_ = from.length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Foo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:benchpb.Foo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Foo::CopyFrom(const Foo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:benchpb.Foo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Foo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void Foo::Swap(Foo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Foo::InternalSwap(Foo* other) {
  std::swap(id_, other->id_);
  std::swap(count_, other->count_);
  std::swap(prefix_, other->prefix_);
  std::swap(length_, other->length_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Foo::GetMetadata() const {
  protobuf_foobar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_foobar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Foo

// required uint64 id = 1;
bool Foo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Foo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Foo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Foo::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
::google::protobuf::uint64 Foo::id() const {
  // @@protoc_insertion_point(field_get:benchpb.Foo.id)
  return id_;
}
void Foo::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:benchpb.Foo.id)
}

// required int32 count = 2;
bool Foo::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Foo::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void Foo::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void Foo::clear_count() {
  count_ = 0;
  clear_has_count();
}
::google::protobuf::int32 Foo::count() const {
  // @@protoc_insertion_point(field_get:benchpb.Foo.count)
  return count_;
}
void Foo::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:benchpb.Foo.count)
}

// required int32 prefix = 3;
bool Foo::has_prefix() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Foo::set_has_prefix() {
  _has_bits_[0] |= 0x00000004u;
}
void Foo::clear_has_prefix() {
  _has_bits_[0] &= ~0x00000004u;
}
void Foo::clear_prefix() {
  prefix_ = 0;
  clear_has_prefix();
}
::google::protobuf::int32 Foo::prefix() const {
  // @@protoc_insertion_point(field_get:benchpb.Foo.prefix)
  return prefix_;
}
void Foo::set_prefix(::google::protobuf::int32 value) {
  set_has_prefix();
  prefix_ = value;
  // @@protoc_insertion_point(field_set:benchpb.Foo.prefix)
}

// required uint32 length = 4;
bool Foo::has_length() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Foo::set_has_length() {
  _has_bits_[0] |= 0x00000008u;
}
void Foo::clear_has_length() {
  _has_bits_[0] &= ~0x00000008u;
}
void Foo::clear_length() {
  length_ = 0u;
  clear_has_length();
}
::google::protobuf::uint32 Foo::length() const {
  // @@protoc_insertion_point(field_get:benchpb.Foo.length)
  return length_;
}
void Foo::set_length(::google::protobuf::uint32 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:benchpb.Foo.length)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Bar::kParentFieldNumber;
const int Bar::kTimeFieldNumber;
const int Bar::kRatioFieldNumber;
const int Bar::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Bar::Bar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_foobar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:benchpb.Bar)
}
Bar::Bar(const Bar& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_parent()) {
    parent_ = new ::benchpb::Foo(*from.parent_);
  } else {
    parent_ = NULL;
  }
  ::memcpy(&time_, &from.time_,
    reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&time_) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:benchpb.Bar)
}

void Bar::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&parent_, 0, reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&parent_) + sizeof(size_));
}

Bar::~Bar() {
  // @@protoc_insertion_point(destructor:benchpb.Bar)
  SharedDtor();
}

void Bar::SharedDtor() {
  if (this != internal_default_instance()) {
    delete parent_;
  }
}

void Bar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bar::descriptor() {
  protobuf_foobar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_foobar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Bar& Bar::default_instance() {
  protobuf_foobar_2eproto::InitDefaults();
  return *internal_default_instance();
}

Bar* Bar::New(::google::protobuf::Arena* arena) const {
  Bar* n = new Bar;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Bar::Clear() {
// @@protoc_insertion_point(message_clear_start:benchpb.Bar)
  if (has_parent()) {
    GOOGLE_DCHECK(parent_ != NULL);
    parent_->::benchpb::Foo::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&time_, 0, reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&time_) + sizeof(size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Bar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:benchpb.Bar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .benchpb.Foo parent = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float ratio = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:benchpb.Bar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:benchpb.Bar)
  return false;
#undef DO_
}

void Bar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:benchpb.Bar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .benchpb.Foo parent = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->parent_, output);
  }

  // required int32 time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time(), output);
  }

  // required float ratio = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->ratio(), output);
  }

  // required uint32 size = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:benchpb.Bar)
}

::google::protobuf::uint8* Bar::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:benchpb.Bar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .benchpb.Foo parent = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->parent_, deterministic, target);
  }

  // required int32 time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->time(), target);
  }

  // required float ratio = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->ratio(), target);
  }

  // required uint32 size = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:benchpb.Bar)
  return target;
}

size_t Bar::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:benchpb.Bar)
  size_t total_size = 0;

  if (has_parent()) {
    // required .benchpb.Foo parent = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->parent_);
  }

  if (has_time()) {
    // required int32 time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time());
  }

  if (has_ratio()) {
    // required float ratio = 3;
    total_size += 1 + 4;
  }

  if (has_size()) {
    // required uint32 size = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->size());
  }

  return total_size;
}
size_t Bar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:benchpb.Bar)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .benchpb.Foo parent = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->parent_);

    // required int32 time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time());

    // required float ratio = 3;
    total_size += 1 + 4;

    // required uint32 size = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:benchpb.Bar)
  GOOGLE_DCHECK_NE(&from, this);
  const Bar* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Bar>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:benchpb.Bar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:benchpb.Bar)
    MergeFrom(*source);
  }
}

void Bar::MergeFrom(const Bar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:benchpb.Bar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_parent()->::benchpb::Foo::MergeFrom(from.parent());
    }
    if (cached_has_bits & 0x00000002u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000004u) {
      ratio_ = from.ratio_;
    }
    if (cached_has_bits & 0x00000008u) {
      size_ = from.size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Bar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:benchpb.Bar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bar::CopyFrom(const Bar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:benchpb.Bar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bar::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_parent()) {
    if (!this->parent_->IsInitialized()) return false;
  }
  return true;
}

void Bar::Swap(Bar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Bar::InternalSwap(Bar* other) {
  std::swap(parent_, other->parent_);
  std::swap(time_, other->time_);
  std::swap(ratio_, other->ratio_);
  std::swap(size_, other->size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Bar::GetMetadata() const {
  protobuf_foobar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_foobar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Bar

// required .benchpb.Foo parent = 1;
bool Bar::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Bar::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
void Bar::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
void Bar::clear_parent() {
  if (parent_ != NULL) parent_->::benchpb::Foo::Clear();
  clear_has_parent();
}
const ::benchpb::Foo& Bar::parent() const {
  // @@protoc_insertion_point(field_get:benchpb.Bar.parent)
  return parent_ != NULL ? *parent_
                         : *::benchpb::Foo::internal_default_instance();
}
::benchpb::Foo* Bar::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    parent_ = new ::benchpb::Foo;
  }
  // @@protoc_insertion_point(field_mutable:benchpb.Bar.parent)
  return parent_;
}
::benchpb::Foo* Bar::release_parent() {
  // @@protoc_insertion_point(field_release:benchpb.Bar.parent)
  clear_has_parent();
  ::benchpb::Foo* temp = parent_;
  parent_ = NULL;
  return temp;
}
void Bar::set_allocated_parent(::benchpb::Foo* parent) {
  delete parent_;
  parent_ = parent;
  if (parent) {
    set_has_parent();
  } else {
    clear_has_parent();
  }
  // @@protoc_insertion_point(field_set_allocated:benchpb.Bar.parent)
}

// required int32 time = 2;
bool Bar::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Bar::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
void Bar::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void Bar::clear_time() {
  time_ = 0;
  clear_has_time();
}
::google::protobuf::int32 Bar::time() const {
  // @@protoc_insertion_point(field_get:benchpb.Bar.time)
  return time_;
}
void Bar::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:benchpb.Bar.time)
}

// required float ratio = 3;
bool Bar::has_ratio() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Bar::set_has_ratio() {
  _has_bits_[0] |= 0x00000004u;
}
void Bar::clear_has_ratio() {
  _has_bits_[0] &= ~0x00000004u;
}
void Bar::clear_ratio() {
  ratio_ = 0;
  clear_has_ratio();
}
float Bar::ratio() const {
  // @@protoc_insertion_point(field_get:benchpb.Bar.ratio)
  return ratio_;
}
void Bar::set_ratio(float value) {
  set_has_ratio();
  ratio_ = value;
  // @@protoc_insertion_point(field_set:benchpb.Bar.ratio)
}

// required uint32 size = 4;
bool Bar::has_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Bar::set_has_size() {
  _has_bits_[0] |= 0x00000008u;
}
void Bar::clear_has_size() {
  _has_bits_[0] &= ~0x00000008u;
}
void Bar::clear_size() {
  size_ = 0u;
  clear_has_size();
}
::google::protobuf::uint32 Bar::size() const {
  // @@protoc_insertion_point(field_get:benchpb.Bar.size)
  return size_;
}
void Bar::set_size(::google::protobuf::uint32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:benchpb.Bar.size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FooBar::kSiblingFieldNumber;
const int FooBar::kNameFieldNumber;
const int FooBar::kRatingFieldNumber;
const int FooBar::kPostfixFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FooBar::FooBar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_foobar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:benchpb.FooBar)
}
FooBar::FooBar(const FooBar& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_sibling()) {
    sibling_ = new ::benchpb::Bar(*from.sibling_);
  } else {
    sibling_ = NULL;
  }
  ::memcpy(&rating_, &from.rating_,
    reinterpret_cast<char*>(&postfix_) -
    reinterpret_cast<char*>(&rating_) + sizeof(postfix_));
  // @@protoc_insertion_point(copy_constructor:benchpb.FooBar)
}

void FooBar::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sibling_, 0, reinterpret_cast<char*>(&postfix_) -
    reinterpret_cast<char*>(&sibling_) + sizeof(postfix_));
}

FooBar::~FooBar() {
  // @@protoc_insertion_point(destructor:benchpb.FooBar)
  SharedDtor();
}

void FooBar::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete sibling_;
  }
}

void FooBar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FooBar::descriptor() {
  protobuf_foobar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_foobar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FooBar& FooBar::default_instance() {
  protobuf_foobar_2eproto::InitDefaults();
  return *internal_default_instance();
}

FooBar* FooBar::New(::google::protobuf::Arena* arena) const {
  FooBar* n = new FooBar;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FooBar::Clear() {
// @@protoc_insertion_point(message_clear_start:benchpb.FooBar)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_sibling()) {
      GOOGLE_DCHECK(sibling_ != NULL);
      sibling_->::benchpb::Bar::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&rating_, 0, reinterpret_cast<char*>(&postfix_) -
      reinterpret_cast<char*>(&rating_) + sizeof(postfix_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FooBar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:benchpb.FooBar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .benchpb.Bar sibling = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sibling()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "benchpb.FooBar.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double rating = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_rating();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rating_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 postfix = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_postfix();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &postfix_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:benchpb.FooBar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:benchpb.FooBar)
  return false;
#undef DO_
}

void FooBar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:benchpb.FooBar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .benchpb.Bar sibling = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->sibling_, output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "benchpb.FooBar.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional double rating = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->rating(), output);
  }

  // optional uint32 postfix = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->postfix(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:benchpb.FooBar)
}

::google::protobuf::uint8* FooBar::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:benchpb.FooBar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .benchpb.Bar sibling = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->sibling_, deterministic, target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "benchpb.FooBar.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional double rating = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->rating(), target);
  }

  // optional uint32 postfix = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->postfix(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:benchpb.FooBar)
  return target;
}

size_t FooBar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:benchpb.FooBar)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .benchpb.Bar sibling = 1;
    if (has_sibling()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sibling_);
    }

    // optional double rating = 3;
    if (has_rating()) {
      total_size += 1 + 8;
    }

    // optional uint32 postfix = 4;
    if (has_postfix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->postfix());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FooBar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:benchpb.FooBar)
  GOOGLE_DCHECK_NE(&from, this);
  const FooBar* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FooBar>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:benchpb.FooBar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:benchpb.FooBar)
    MergeFrom(*source);
  }
}

void FooBar::MergeFrom(const FooBar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:benchpb.FooBar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_sibling()->::benchpb::Bar::MergeFrom(from.sibling());
    }
    if (cached_has_bits & 0x00000004u) {
      rating_ = from.rating_;
    }
    if (cached_has_bits & 0x00000008u) {
      postfix_ = from.postfix_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FooBar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:benchpb.FooBar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FooBar::CopyFrom(const FooBar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:benchpb.FooBar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FooBar::IsInitialized() const {
  if (has_sibling()) {
    if (!this->sibling_->IsInitialized()) return false;
  }
  return true;
}

void FooBar::Swap(FooBar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FooBar::InternalSwap(FooBar* other) {
  name_.Swap(&other->name_);
  std::swap(sibling_, other->sibling_);
  std::swap(rating_, other->rating_);
  std::swap(postfix_, other->postfix_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FooBar::GetMetadata() const {
  protobuf_foobar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_foobar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FooBar

// optional .benchpb.Bar sibling = 1;
bool FooBar::has_sibling() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FooBar::set_has_sibling() {
  _has_bits_[0] |= 0x00000002u;
}
void FooBar::clear_has_sibling() {
  _has_bits_[0] &= ~0x00000002u;
}
void FooBar::clear_sibling() {
  if (sibling_ != NULL) sibling_->::benchpb::Bar::Clear();
  clear_has_sibling();
}
const ::benchpb::Bar& FooBar::sibling() const {
  // @@protoc_insertion_point(field_get:benchpb.FooBar.sibling)
  return sibling_ != NULL ? *sibling_
                         : *::benchpb::Bar::internal_default_instance();
}
::benchpb::Bar* FooBar::mutable_sibling() {
  set_has_sibling();
  if (sibling_ == NULL) {
    sibling_ = new ::benchpb::Bar;
  }
  // @@protoc_insertion_point(field_mutable:benchpb.FooBar.sibling)
  return sibling_;
}
::benchpb::Bar* FooBar::release_sibling() {
  // @@protoc_insertion_point(field_release:benchpb.FooBar.sibling)
  clear_has_sibling();
  ::benchpb::Bar* temp = sibling_;
  sibling_ = NULL;
  return temp;
}
void FooBar::set_allocated_sibling(::benchpb::Bar* sibling) {
  delete sibling_;
  sibling_ = sibling;
  if (sibling) {
    set_has_sibling();
  } else {
    clear_has_sibling();
  }
  // @@protoc_insertion_point(field_set_allocated:benchpb.FooBar.sibling)
}

// optional string name = 2;
bool FooBar::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FooBar::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void FooBar::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void FooBar::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& FooBar::name() const {
  // @@protoc_insertion_point(field_get:benchpb.FooBar.name)
  return name_.GetNoArena();
}
void FooBar::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:benchpb.FooBar.name)
}
#if LANG_CXX11
void FooBar::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:benchpb.FooBar.name)
}
#endif
void FooBar::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:benchpb.FooBar.name)
}
void FooBar::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:benchpb.FooBar.name)
}
::std::string* FooBar::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:benchpb.FooBar.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FooBar::release_name() {
  // @@protoc_insertion_point(field_release:benchpb.FooBar.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FooBar::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:benchpb.FooBar.name)
}

// optional double rating = 3;
bool FooBar::has_rating() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FooBar::set_has_rating() {
  _has_bits_[0] |= 0x00000004u;
}
void FooBar::clear_has_rating() {
  _has_bits_[0] &= ~0x00000004u;
}
void FooBar::clear_rating() {
  rating_ = 0;
  clear_has_rating();
}
double FooBar::rating() const {
  // @@protoc_insertion_point(field_get:benchpb.FooBar.rating)
  return rating_;
}
void FooBar::set_rating(double value) {
  set_has_rating();
  rating_ = value;
  // @@protoc_insertion_point(field_set:benchpb.FooBar.rating)
}

// optional uint32 postfix = 4;
bool FooBar::has_postfix() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FooBar::set_has_postfix() {
  _has_bits_[0] |= 0x00000008u;
}
void FooBar::clear_has_postfix() {
  _has_bits_[0] &= ~0x00000008u;
}
void FooBar::clear_postfix() {
  postfix_ = 0u;
  clear_has_postfix();
}
::google::protobuf::uint32 FooBar::postfix() const {
  // @@protoc_insertion_point(field_get:benchpb.FooBar.postfix)
  return postfix_;
}
void FooBar::set_postfix(::google::protobuf::uint32 value) {
  set_has_postfix();
  postfix_ = value;
  // @@protoc_insertion_point(field_set:benchpb.FooBar.postfix)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FooBarContainer::kListFieldNumber;
const int FooBarContainer::kInitializedFieldNumber;
const int FooBarContainer::kFruitFieldNumber;
const int FooBarContainer::kLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FooBarContainer::FooBarContainer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_foobar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:benchpb.FooBarContainer)
}
FooBarContainer::FooBarContainer(const FooBarContainer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_location()) {
    location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
  ::memcpy(&initialized_, &from.initialized_,
    reinterpret_cast<char*>(&fruit_) -
    reinterpret_cast<char*>(&initialized_) + sizeof(fruit_));
  // @@protoc_insertion_point(copy_constructor:benchpb.FooBarContainer)
}

void FooBarContainer::SharedCtor() {
  _cached_size_ = 0;
  location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&initialized_, 0, reinterpret_cast<char*>(&fruit_) -
    reinterpret_cast<char*>(&initialized_) + sizeof(fruit_));
}

FooBarContainer::~FooBarContainer() {
  // @@protoc_insertion_point(destructor:benchpb.FooBarContainer)
  SharedDtor();
}

void FooBarContainer::SharedDtor() {
  location_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FooBarContainer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FooBarContainer::descriptor() {
  protobuf_foobar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_foobar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FooBarContainer& FooBarContainer::default_instance() {
  protobuf_foobar_2eproto::InitDefaults();
  return *internal_default_instance();
}

FooBarContainer* FooBarContainer::New(::google::protobuf::Arena* arena) const {
  FooBarContainer* n = new FooBarContainer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FooBarContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:benchpb.FooBarContainer)
  list_.Clear();
  if (has_location()) {
    GOOGLE_DCHECK(!location_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*location_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&initialized_, 0, reinterpret_cast<char*>(&fruit_) -
      reinterpret_cast<char*>(&initialized_) + sizeof(fruit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FooBarContainer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:benchpb.FooBarContainer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .benchpb.FooBar list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool initialized = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_initialized();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &initialized_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .benchpb.Enum fruit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::benchpb::Enum_IsValid(value)) {
            set_fruit(static_cast< ::benchpb::Enum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string location = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->location().data(), this->location().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "benchpb.FooBarContainer.location");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:benchpb.FooBarContainer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:benchpb.FooBarContainer)
  return false;
#undef DO_
}

void FooBarContainer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:benchpb.FooBarContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .benchpb.FooBar list = 1;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool initialized = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->initialized(), output);
  }

  // optional .benchpb.Enum fruit = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->fruit(), output);
  }

  // optional string location = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "benchpb.FooBarContainer.location");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->location(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:benchpb.FooBarContainer)
}

::google::protobuf::uint8* FooBarContainer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:benchpb.FooBarContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .benchpb.FooBar list = 1;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->list(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool initialized = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->initialized(), target);
  }

  // optional .benchpb.Enum fruit = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->fruit(), target);
  }

  // optional string location = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "benchpb.FooBarContainer.location");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->location(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:benchpb.FooBarContainer)
  return target;
}

size_t FooBarContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:benchpb.FooBarContainer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .benchpb.FooBar list = 1;
  {
    unsigned int count = this->list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string location = 4;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->location());
    }

    // optional bool initialized = 2;
    if (has_initialized()) {
      total_size += 1 + 1;
    }

    // optional .benchpb.Enum fruit = 3;
    if (has_fruit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fruit());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FooBarContainer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:benchpb.FooBarContainer)
  GOOGLE_DCHECK_NE(&from, this);
  const FooBarContainer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FooBarContainer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:benchpb.FooBarContainer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:benchpb.FooBarContainer)
    MergeFrom(*source);
  }
}

void FooBarContainer::MergeFrom(const FooBarContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:benchpb.FooBarContainer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_location();
      location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_);
    }
    if (cached_has_bits & 0x00000002u) {
      initialized_ = from.initialized_;
    }
    if (cached_has_bits & 0x00000004u) {
      fruit_ = from.fruit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FooBarContainer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:benchpb.FooBarContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FooBarContainer::CopyFrom(const FooBarContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:benchpb.FooBarContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FooBarContainer::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void FooBarContainer::Swap(FooBarContainer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FooBarContainer::InternalSwap(FooBarContainer* other) {
  list_.InternalSwap(&other->list_);
  location_.Swap(&other->location_);
  std::swap(initialized_, other->initialized_);
  std::swap(fruit_, other->fruit_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FooBarContainer::GetMetadata() const {
  protobuf_foobar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_foobar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FooBarContainer

// repeated .benchpb.FooBar list = 1;
int FooBarContainer::list_size() const {
  return list_.size();
}
void FooBarContainer::clear_list() {
  list_.Clear();
}
const ::benchpb::FooBar& FooBarContainer::list(int index) const {
  // @@protoc_insertion_point(field_get:benchpb.FooBarContainer.list)
  return list_.Get(index);
}
::benchpb::FooBar* FooBarContainer::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:benchpb.FooBarContainer.list)
  return list_.Mutable(index);
}
::benchpb::FooBar* FooBarContainer::add_list() {
  // @@protoc_insertion_point(field_add:benchpb.FooBarContainer.list)
  return list_.Add();
}
::google::protobuf::RepeatedPtrField< ::benchpb::FooBar >*
FooBarContainer::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:benchpb.FooBarContainer.list)
  return &list_;
}
const ::google::protobuf::RepeatedPtrField< ::benchpb::FooBar >&
FooBarContainer::list() const {
  // @@protoc_insertion_point(field_list:benchpb.FooBarContainer.list)
  return list_;
}

// optional bool initialized = 2;
bool FooBarContainer::has_initialized() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FooBarContainer::set_has_initialized() {
  _has_bits_[0] |= 0x00000002u;
}
void FooBarContainer::clear_has_initialized() {
  _has_bits_[0] &= ~0x00000002u;
}
void FooBarContainer::clear_initialized() {
  initialized_ = false;
  clear_has_initialized();
}
bool FooBarContainer::initialized() const {
  // @@protoc_insertion_point(field_get:benchpb.FooBarContainer.initialized)
  return initialized_;
}
void FooBarContainer::set_initialized(bool value) {
  set_has_initialized();
  initialized_ = value;
  // @@protoc_insertion_point(field_set:benchpb.FooBarContainer.initialized)
}

// optional .benchpb.Enum fruit = 3;
bool FooBarContainer::has_fruit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FooBarContainer::set_has_fruit() {
  _has_bits_[0] |= 0x00000004u;
}
void FooBarContainer::clear_has_fruit() {
  _has_bits_[0] &= ~0x00000004u;
}
void FooBarContainer::clear_fruit() {
  fruit_ = 0;
  clear_has_fruit();
}
::benchpb::Enum FooBarContainer::fruit() const {
  // @@protoc_insertion_point(field_get:benchpb.FooBarContainer.fruit)
  return static_cast< ::benchpb::Enum >(fruit_);
}
void FooBarContainer::set_fruit(::benchpb::Enum value) {
  assert(::benchpb::Enum_IsValid(value));
  set_has_fruit();
  fruit_ = value;
  // @@protoc_insertion_point(field_set:benchpb.FooBarContainer.fruit)
}

// optional string location = 4;
bool FooBarContainer::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FooBarContainer::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
void FooBarContainer::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
void FooBarContainer::clear_location() {
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_location();
}
const ::std::string& FooBarContainer::location() const {
  // @@protoc_insertion_point(field_get:benchpb.FooBarContainer.location)
  return location_.GetNoArena();
}
void FooBarContainer::set_location(const ::std::string& value) {
  set_has_location();
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:benchpb.FooBarContainer.location)
}
#if LANG_CXX11
void FooBarContainer::set_location(::std::string&& value) {
  set_has_location();
  location_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:benchpb.FooBarContainer.location)
}
#endif
void FooBarContainer::set_location(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_location();
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:benchpb.FooBarContainer.location)
}
void FooBarContainer::set_location(const char* value, size_t size) {
  set_has_location();
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:benchpb.FooBarContainer.location)
}
::std::string* FooBarContainer::mutable_location() {
  set_has_location();
  // @@protoc_insertion_point(field_mutable:benchpb.FooBarContainer.location)
  return location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FooBarContainer::release_location() {
  // @@protoc_insertion_point(field_release:benchpb.FooBarContainer.location)
  clear_has_location();
  return location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FooBarContainer::set_allocated_location(::std::string* location) {
  if (location != NULL) {
    set_has_location();
  } else {
    clear_has_location();
  }
  location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location);
  // @@protoc_insertion_point(field_set_allocated:benchpb.FooBarContainer.location)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace benchpb

// @@protoc_insertion_point(global_scope)
