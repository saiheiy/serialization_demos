// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FOOBAR_FOOBAR_H_
#define FLATBUFFERS_GENERATED_FOOBAR_FOOBAR_H_

#include "flatbuffers/flatbuffers.h"

namespace foobar {

struct Foo;

struct Bar;

struct FooBar;

struct FooBarContainer;

enum Enum {
  Enum_Apples = 0,
  Enum_Pears = 1,
  Enum_Bananas = 2,
  Enum_MIN = Enum_Apples,
  Enum_MAX = Enum_Bananas
};

inline const char **EnumNamesEnum() {
  static const char *names[] = {
    "Apples",
    "Pears",
    "Bananas",
    nullptr
  };
  return names;
}

inline const char *EnumNameEnum(Enum e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesEnum()[index];
}

MANUALLY_ALIGNED_STRUCT(8) Foo FLATBUFFERS_FINAL_CLASS {
 private:
  uint64_t id_;
  int16_t count_;
  int8_t prefix_;
  int8_t padding0__;
  uint32_t length_;

 public:
  Foo() {
    memset(this, 0, sizeof(Foo));
  }
  Foo(const Foo &_o) {
    memcpy(this, &_o, sizeof(Foo));
  }
  Foo(uint64_t _id, int16_t _count, int8_t _prefix, uint32_t _length)
      : id_(flatbuffers::EndianScalar(_id)),
        count_(flatbuffers::EndianScalar(_count)),
        prefix_(flatbuffers::EndianScalar(_prefix)),
        padding0__(0),
        length_(flatbuffers::EndianScalar(_length)) {
    (void)padding0__;
  }
  uint64_t id() const {
    return flatbuffers::EndianScalar(id_);
  }
  int16_t count() const {
    return flatbuffers::EndianScalar(count_);
  }
  int8_t prefix() const {
    return flatbuffers::EndianScalar(prefix_);
  }
  uint32_t length() const {
    return flatbuffers::EndianScalar(length_);
  }
};
STRUCT_END(Foo, 16);

MANUALLY_ALIGNED_STRUCT(8) Bar FLATBUFFERS_FINAL_CLASS {
 private:
  Foo parent_;
  int32_t time_;
  float ratio_;
  uint16_t size_;
  int16_t padding0__;  int32_t padding1__;

 public:
  Bar() {
    memset(this, 0, sizeof(Bar));
  }
  Bar(const Bar &_o) {
    memcpy(this, &_o, sizeof(Bar));
  }
  Bar(const Foo &_parent, int32_t _time, float _ratio, uint16_t _size)
      : parent_(_parent),
        time_(flatbuffers::EndianScalar(_time)),
        ratio_(flatbuffers::EndianScalar(_ratio)),
        size_(flatbuffers::EndianScalar(_size)),
        padding0__(0),
        padding1__(0) {
    (void)padding0__;    (void)padding1__;
  }
  const Foo &parent() const {
    return parent_;
  }
  int32_t time() const {
    return flatbuffers::EndianScalar(time_);
  }
  float ratio() const {
    return flatbuffers::EndianScalar(ratio_);
  }
  uint16_t size() const {
    return flatbuffers::EndianScalar(size_);
  }
};
STRUCT_END(Bar, 32);

struct FooBar FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_SIBLING = 4,
    VT_NAME = 6,
    VT_RATING = 8,
    VT_POSTFIX = 10
  };
  const Bar *sibling() const {
    return GetStruct<const Bar *>(VT_SIBLING);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  double rating() const {
    return GetField<double>(VT_RATING, 0.0);
  }
  uint8_t postfix() const {
    return GetField<uint8_t>(VT_POSTFIX, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Bar>(verifier, VT_SIBLING) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyField<double>(verifier, VT_RATING) &&
           VerifyField<uint8_t>(verifier, VT_POSTFIX) &&
           verifier.EndTable();
  }
};

struct FooBarBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_sibling(const Bar *sibling) {
    fbb_.AddStruct(FooBar::VT_SIBLING, sibling);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(FooBar::VT_NAME, name);
  }
  void add_rating(double rating) {
    fbb_.AddElement<double>(FooBar::VT_RATING, rating, 0.0);
  }
  void add_postfix(uint8_t postfix) {
    fbb_.AddElement<uint8_t>(FooBar::VT_POSTFIX, postfix, 0);
  }
  FooBarBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FooBarBuilder &operator=(const FooBarBuilder &);
  flatbuffers::Offset<FooBar> Finish() {
    const auto end = fbb_.EndTable(start_, 4);
    auto o = flatbuffers::Offset<FooBar>(end);
    return o;
  }
};

inline flatbuffers::Offset<FooBar> CreateFooBar(
    flatbuffers::FlatBufferBuilder &_fbb,
    const Bar *sibling = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    double rating = 0.0,
    uint8_t postfix = 0) {
  FooBarBuilder builder_(_fbb);
  builder_.add_rating(rating);
  builder_.add_name(name);
  builder_.add_sibling(sibling);
  builder_.add_postfix(postfix);
  return builder_.Finish();
}

inline flatbuffers::Offset<FooBar> CreateFooBarDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const Bar *sibling = 0,
    const char *name = nullptr,
    double rating = 0.0,
    uint8_t postfix = 0) {
  return foobar::CreateFooBar(
      _fbb,
      sibling,
      name ? _fbb.CreateString(name) : 0,
      rating,
      postfix);
}

struct FooBarContainer FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_LIST = 4,
    VT_INITIALIZED = 6,
    VT_FRUIT = 8,
    VT_LOCATION = 10
  };
  const flatbuffers::Vector<flatbuffers::Offset<FooBar>> *list() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<FooBar>> *>(VT_LIST);
  }
  bool initialized() const {
    return GetField<uint8_t>(VT_INITIALIZED, 0) != 0;
  }
  Enum fruit() const {
    return static_cast<Enum>(GetField<int16_t>(VT_FRUIT, 0));
  }
  const flatbuffers::String *location() const {
    return GetPointer<const flatbuffers::String *>(VT_LOCATION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_LIST) &&
           verifier.Verify(list()) &&
           verifier.VerifyVectorOfTables(list()) &&
           VerifyField<uint8_t>(verifier, VT_INITIALIZED) &&
           VerifyField<int16_t>(verifier, VT_FRUIT) &&
           VerifyOffset(verifier, VT_LOCATION) &&
           verifier.Verify(location()) &&
           verifier.EndTable();
  }
};

struct FooBarContainerBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_list(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FooBar>>> list) {
    fbb_.AddOffset(FooBarContainer::VT_LIST, list);
  }
  void add_initialized(bool initialized) {
    fbb_.AddElement<uint8_t>(FooBarContainer::VT_INITIALIZED, static_cast<uint8_t>(initialized), 0);
  }
  void add_fruit(Enum fruit) {
    fbb_.AddElement<int16_t>(FooBarContainer::VT_FRUIT, static_cast<int16_t>(fruit), 0);
  }
  void add_location(flatbuffers::Offset<flatbuffers::String> location) {
    fbb_.AddOffset(FooBarContainer::VT_LOCATION, location);
  }
  FooBarContainerBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FooBarContainerBuilder &operator=(const FooBarContainerBuilder &);
  flatbuffers::Offset<FooBarContainer> Finish() {
    const auto end = fbb_.EndTable(start_, 4);
    auto o = flatbuffers::Offset<FooBarContainer>(end);
    return o;
  }
};

inline flatbuffers::Offset<FooBarContainer> CreateFooBarContainer(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FooBar>>> list = 0,
    bool initialized = false,
    Enum fruit = Enum_Apples,
    flatbuffers::Offset<flatbuffers::String> location = 0) {
  FooBarContainerBuilder builder_(_fbb);
  builder_.add_location(location);
  builder_.add_list(list);
  builder_.add_fruit(fruit);
  builder_.add_initialized(initialized);
  return builder_.Finish();
}

inline flatbuffers::Offset<FooBarContainer> CreateFooBarContainerDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<FooBar>> *list = nullptr,
    bool initialized = false,
    Enum fruit = Enum_Apples,
    const char *location = nullptr) {
  return foobar::CreateFooBarContainer(
      _fbb,
      list ? _fbb.CreateVector<flatbuffers::Offset<FooBar>>(*list) : 0,
      initialized,
      fruit,
      location ? _fbb.CreateString(location) : 0);
}

inline const foobar::FooBarContainer *GetFooBarContainer(const void *buf) {
  return flatbuffers::GetRoot<foobar::FooBarContainer>(buf);
}

inline bool VerifyFooBarContainerBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<foobar::FooBarContainer>(nullptr);
}

inline void FinishFooBarContainerBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<foobar::FooBarContainer> root) {
  fbb.Finish(root);
}

}  // namespace foobar

#endif  // FLATBUFFERS_GENERATED_FOOBAR_FOOBAR_H_
