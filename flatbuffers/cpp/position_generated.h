// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_POSITION_PS_H_
#define FLATBUFFERS_GENERATED_POSITION_PS_H_

#include "flatbuffers/flatbuffers.h"

namespace Ps {

struct Position;

struct Position FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_POSITIONID = 4,
    VT_SECNAME = 6,
    VT_ACCOUNTID = 8,
    VT_POSQTY = 10,
    VT_AVGCOST = 12,
    VT_MV = 14
  };
  int64_t positionId() const {
    return GetField<int64_t>(VT_POSITIONID, 0);
  }
  const flatbuffers::String *secName() const {
    return GetPointer<const flatbuffers::String *>(VT_SECNAME);
  }
  int32_t accountId() const {
    return GetField<int32_t>(VT_ACCOUNTID, 0);
  }
  double posQty() const {
    return GetField<double>(VT_POSQTY, 0.0);
  }
  double avgCost() const {
    return GetField<double>(VT_AVGCOST, 0.0);
  }
  double mv() const {
    return GetField<double>(VT_MV, 0.0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_POSITIONID) &&
           VerifyOffset(verifier, VT_SECNAME) &&
           verifier.Verify(secName()) &&
           VerifyField<int32_t>(verifier, VT_ACCOUNTID) &&
           VerifyField<double>(verifier, VT_POSQTY) &&
           VerifyField<double>(verifier, VT_AVGCOST) &&
           VerifyField<double>(verifier, VT_MV) &&
           verifier.EndTable();
  }
};

struct PositionBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_positionId(int64_t positionId) {
    fbb_.AddElement<int64_t>(Position::VT_POSITIONID, positionId, 0);
  }
  void add_secName(flatbuffers::Offset<flatbuffers::String> secName) {
    fbb_.AddOffset(Position::VT_SECNAME, secName);
  }
  void add_accountId(int32_t accountId) {
    fbb_.AddElement<int32_t>(Position::VT_ACCOUNTID, accountId, 0);
  }
  void add_posQty(double posQty) {
    fbb_.AddElement<double>(Position::VT_POSQTY, posQty, 0.0);
  }
  void add_avgCost(double avgCost) {
    fbb_.AddElement<double>(Position::VT_AVGCOST, avgCost, 0.0);
  }
  void add_mv(double mv) {
    fbb_.AddElement<double>(Position::VT_MV, mv, 0.0);
  }
  PositionBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PositionBuilder &operator=(const PositionBuilder &);
  flatbuffers::Offset<Position> Finish() {
    const auto end = fbb_.EndTable(start_, 6);
    auto o = flatbuffers::Offset<Position>(end);
    return o;
  }
};

inline flatbuffers::Offset<Position> CreatePosition(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t positionId = 0,
    flatbuffers::Offset<flatbuffers::String> secName = 0,
    int32_t accountId = 0,
    double posQty = 0.0,
    double avgCost = 0.0,
    double mv = 0.0) {
  PositionBuilder builder_(_fbb);
  builder_.add_mv(mv);
  builder_.add_avgCost(avgCost);
  builder_.add_posQty(posQty);
  builder_.add_positionId(positionId);
  builder_.add_accountId(accountId);
  builder_.add_secName(secName);
  return builder_.Finish();
}

inline flatbuffers::Offset<Position> CreatePositionDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t positionId = 0,
    const char *secName = nullptr,
    int32_t accountId = 0,
    double posQty = 0.0,
    double avgCost = 0.0,
    double mv = 0.0) {
  return Ps::CreatePosition(
      _fbb,
      positionId,
      secName ? _fbb.CreateString(secName) : 0,
      accountId,
      posQty,
      avgCost,
      mv);
}

inline const Ps::Position *GetPosition(const void *buf) {
  return flatbuffers::GetRoot<Ps::Position>(buf);
}

inline bool VerifyPositionBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Ps::Position>(nullptr);
}

inline void FinishPositionBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Ps::Position> root) {
  fbb.Finish(root);
}

}  // namespace Ps

#endif  // FLATBUFFERS_GENERATED_POSITION_PS_H_
